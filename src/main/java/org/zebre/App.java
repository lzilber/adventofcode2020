/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.zebre;

import org.zebre.puzzle.Puzzle1;
import org.zebre.puzzle.Puzzle10;
import org.zebre.puzzle.Puzzle11;
import org.zebre.puzzle.Puzzle12;
import org.zebre.puzzle.Puzzle12.Position;
import org.zebre.puzzle.Puzzle13;
import org.zebre.puzzle.Puzzle14;
import org.zebre.puzzle.Puzzle15;
import org.zebre.puzzle.Puzzle16;
import org.zebre.puzzle.Puzzle17;
import org.zebre.puzzle.Puzzle2;
import org.zebre.puzzle.Puzzle3;
import org.zebre.puzzle.Puzzle4;
import org.zebre.puzzle.Puzzle5;
import org.zebre.puzzle.Puzzle6;
import org.zebre.puzzle.Puzzle7;
import org.zebre.puzzle.Puzzle8;
import org.zebre.puzzle.Puzzle8.Instruction;
import org.zebre.puzzle.Puzzle9;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class App {

    public static void main(String[] args) {
        System.out.println(new App().solvePuzzle17());
    }
    
    public String solvePuzzle17() {
      Puzzle17 puzzle = new Puzzle17();
      List<String> entries = Arrays.asList(
          "....###.", 
          "#...####", 
          "##.#.###",
          "..#.#...",
          "##.#.#.#",
          "#.######",
          "..#..#.#",
          "######.#");          
      return "Result #17, part 1: " +puzzle.solvePart1(entries);
    }

    public String solvePuzzle16() {
      Puzzle16 puzzle = new Puzzle16();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-16-input.txt");
      List<String> entries = loadInput(path.toString());
      puzzle.solvePart2(entries);
/*
departure location: 32-174 or 190-967  : [2, 6,        11, 14, 15, 16,     18]     => 18
departure station: 50-580 or 588-960   : [2, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19] => 17
departure platform: 35-595 or 621-972  : [2, 6,    10, 11, 14, 15, 16,     18, 19] => 10
departure track: 41-85 or 104-962      : [2, 6,        11, 14, 15, 16,     18, 19] => 19
departure date: 39-293 or 299-964      : [2, 6,        11, 14, 15, 16]             => 
departure time: 44-192 or 215-962      : [2, 6, 7, 10, 11, 14, 15, 16,     18, 19] => 7

71,223,167,191,233,83


 */
      return "Result #16: " +puzzle.solvePart1(entries);
    }
    
    public String solvePuzzle15() {
      Puzzle15 puzzle = new Puzzle15();
      return "Result #15, part 2: " +puzzle.solvePart2();
    }
    

    public String solvePuzzle14() {
      Puzzle14 puzzle = new Puzzle14();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-14-input.txt");
      List<String> entries = loadInput(path.toString());
      return "Result #14: " +puzzle.solvePart1(entries);
    }
    
    public String solvePuzzle13() {
      Puzzle13 puzzle = new Puzzle13();
      return "Result #13: " +puzzle.solvePart2();
    }
    
    public String solvePuzzle12() {
      Puzzle12 puzzle = new Puzzle12(); 
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-12-input.txt");
      List<String> entries = loadInput(path.toString());
      puzzle.initWaypoint(10, 1);
      Position boat = puzzle.runActions(entries);
      return "Result #12: " + puzzle.getManhattanDistance() + " boat:" + boat;      
    }
    
    public String solvePuzzle11() {
      Puzzle11 puzzle = new Puzzle11();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-11-input.txt");
      List<String> entries = loadInput(path.toString());
      int[][] seats = puzzle.loadInput(entries);
      int rounds = 0;
      while( puzzle.roundOfRules(seats) && rounds < 1000 ) {
        rounds++;
      }
      return "Result #11: part 2 " + puzzle.countSeats('#', seats);
    }

    public String solvePuzzle10() {
      Puzzle10 puzzle = new Puzzle10();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-10-input.txt");
      List<String> entries = loadInput(path.toString());
      int[] adapters = puzzle.sortedAdapters(entries);
      int jolt1 = puzzle.numberOfJolts(1, adapters);
      int jolt3 = puzzle.numberOfJolts(3, adapters) + 1;
      return "Result #10: part 1 " + jolt1 + "*" + jolt3 + "=" + (jolt1*jolt3)
          + "\n part2 : " + puzzle.oneJoltsAdapterArrangements(adapters);
    }
  
    public String solvePuzzle9() {
      Puzzle9 puzzle = new Puzzle9();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-9-input.txt");
      List<String> entries = loadInput(path.toString());
      // return "Result #9: number not matching is " + puzzle.findMatch(entries, 25);
      return "Result #9: part 2 sum is " + puzzle.findSumOfMatchRangeBounds(entries, 100, Puzzle9.PART1);
    }
  
    public String solvePuzzle8() {
      Puzzle8 puzzle = new Puzzle8();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-8-input.txt");
      List<String> entries = loadInput(path.toString());
      Map<Integer, Instruction> program = puzzle.loadProgram(entries);
      return "Result #8: accumulator before loop is " + puzzle.runProgramUntilLoop(program);
      //return "Result #8: End reached when swapping " + puzzle.runProgramUntilEnd(program);
      // -> End reached after swapping line 254
    }
  
    public String solvePuzzle7() {
      Puzzle7 puzzle = new Puzzle7();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-7-input.txt");
      List<String> entries = loadInput(path.toString());
      return "Result #7: counted " + puzzle.countBagOptionsFor(entries, "shiny gold") + " shiny gold bags container\n"
          + "part 2: " + puzzle.countBagInside(entries, "shiny gold");
    }
    
    public String solvePuzzle6() {
      Puzzle6 puzzle = new Puzzle6();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-6-input.txt");
      List<String> entries = loadInput(path.toString());
      return "Result #6: counted " + puzzle.addAllGroupsAnswers(entries) + " answers\n"
          + "then counted " + puzzle.addStep2GroupsAnswers(entries) + " common answers";
    }
    
    public String solvePuzzle5() {
      Puzzle5 puzzle = new Puzzle5();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-5-input.txt");
      List<String> entries = loadInput(path.toString());
      long maxId = puzzle.maxSeatId(entries);
      long mySeatId = puzzle.checkAvailableSeat();
      return "Result #5: max seatId " + maxId 
          + "\n My seat is " + mySeatId;
    }
	
    public String solvePuzzle3() {
      Puzzle3 puzzle = new Puzzle3();     
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-3-input.txt");
      List<String> entries = loadInput(path.toString());
      int trees11 = puzzle.countTrees(entries, 1, 1, false);
      int trees31 = puzzle.countTrees(entries, 3, 1, false);
      int trees51 = puzzle.countTrees(entries, 5, 1, false);
      int trees71 = puzzle.countTrees(entries, 7, 1, false);      
      int trees12 = puzzle.countTrees(entries, 1, 2, false);
      long result = (long)trees11 * (long)trees31 * (long)trees51 * (long)trees71 * (long)trees12;
      
      return "Result #3: found " + trees31 + " trees"
          + "\n" + "then found " + trees11 + " * " + trees31 + " * " + trees51 + " * " + trees71 + " * " + trees12 + " * "
          + "=" + result + " matching entries";
    }
    
    public String solvePuzzle4() {
      Puzzle4 puzzle = new Puzzle4();
      Path path = FileSystems.getDefault().getPath("./src/main/resources/day-4-input.txt");
      List<String> entries = loadInput(path.toString());
      long result = puzzle.countValidPassportsStep1(entries);
      long check = puzzle.countValidPassportsStep2(entries);
      return "Result #4: found " + result + " valid passports"
          + "\n" + "then found " + check + " on step 2.";
    }
    
   public String solvePuzzle2() {
    	Puzzle2 puzzle = new Puzzle2();
    	Path path = FileSystems.getDefault().getPath("./src/main/resources/day-2-input.txt");
    	List<String> entries = loadInput(path.toString());
    	int count1 = 0, count2 = 0;
    	for (String value : entries) {
			if (puzzle.checkEntry(value, true)) {
				count1++;
			}
			if (puzzle.checkEntry(value, false)) {
				count2++;
			}
		}
    	return "Result #2: found " + count1 + " valid entries"
    			+ "\n" + "then found " + count2 + " matching entries";
    }
    
    public String solvePuzzle1() {
    Puzzle1 puzzle = new Puzzle1();
    AbstractMap.SimpleImmutableEntry<Integer, Integer> result1 = puzzle.match2(input, 2020);
    List<Integer> result2 = puzzle.match3(input, 2020);
        return "Result #1: " + result1 + " " + puzzle.multiply(result1) 
          + "\n" + result2 + " " + puzzle.multiply(result2);
    }
    
    /* Helper classes */

    public List<String> loadInput(InputStream stream) {
    	if (stream != null) {
    		BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
    		try {
    			List<String> result = new ArrayList<>();
				while(reader.ready()) {
				     result.add(reader.readLine());
				}
				return result;
			} catch (IOException e) {
				e.printStackTrace();
			}
    	}
    	return Collections.emptyList();
    }

    
    public List<String> loadInput(String filepath) {
    	FileInputStream stream = openFile(filepath);
    	return loadInput(stream);
    }
        
    protected FileInputStream openFile(String filename) {
        FileInputStream stream = null;
        try {
          stream = new FileInputStream(filename);
        } catch (FileNotFoundException e) {
          e.printStackTrace();
        }
        try {
          if (stream != null && stream.available() == 0) {
            stream.close();
            stream = null;
          }
        } catch (IOException e) {
          e.printStackTrace();
          stream = null;
        }
        return stream;  
    }

static List<Integer> input = Arrays.asList(
1993,
1715,
1997,
1666,
1676,
1830,
1203,
1800,
1125,
1191,
1902,
1972,
1471,
1137,
2003,
1250,
1548,
1070,
1152,
2004,
1127,
1111,
1898,
1848,
1934,
1236,
1704,
1950,
1387,
1713,
1214,
1266,
1114,
1089,
1677,
1207,
1341,
1689,
1772,
1901,
1932,
1645,
1285,
1884,
883,
1291,
1543,
1455,
1213,
1088,
1784,
1506,
1879,
1811,
1880,
994,
1021,
1585,
1662,
1683,
1071,
1643,
1754,
1389,
1124,
1820,
1168,
1875,
1017,
1180,
1375,
1359,
1311,
1357,
1501,
1719,
1584,
1609,
1977,
1786,
1232,
1263,
1748,
1664,
1693,
1766,
1598,
1053,
1277,
1466,
1877,
1844,
1829,
1165,
1606,
1298,
1963,
1873,
1911,
1729,
1418,
1372,
1777,
1371,
1588,
1329,
1029,
1931,
1115,
1810,
1595,
1237,
1282,
1838,
1642,
1937,
1343,
1578,
1425,
1814,
1690,
1129,
1321,
1174,
1863,
1405,
1066,
1220,
1780,
1410,
1156,
1991,
1568,
1368,
99,
1750,
1280,
1400,
1601,
1804,
1363,
1613,
1252,
1434,
1094,
1867,
1542,
1093,
1926,
1251,
1348,
689,
1441,
1913,
1969,
1409,
1201,
1459,
1110,
1452,
1051,
1860,
1346,
1537,
1060,
1182,
1386,
1141,
1184,
1989,
1852,
1097,
1135,
1078,
1587,
1984,
1970,
1259,
1281,
1092,
1294,
1233,
1186,
1555,
1755,
1886,
1030,
1706,
1313,
1481,
1998,
1181,
1244,
1269,
1684,
1798,
1023,
1960, 
1050, 
1293);

}